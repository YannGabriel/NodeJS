db

const mysql = require('mysql2/promise'); // Importa o módulo mysql2

// Criação da conexão com o banco de dados
const conexao = mysql.createPool({
  host: 'localhost', // Seu host (pode ser localhost)
  user: 'root',      // Seu usuário do MySQL
  password: '',      // Sua senha do MySQL
  database: 'sistema_reservas' // Nome do banco de dados
});

// função para testar a conexão
async function testarConexao() {
    try {
        await conexao.query('SELECT 1');
        console.log('Conexão com o banco de dados realizada com sucesso!');
    } catch (erro) {
        console.error('Erro ao se conectar ao banco de dados: ' + erro);
    }
}

testarConexao(); // Testa a conexão

module.exports = conexao;


index:

//Dependencias 
const express = require("express");
const conexao = require("./db");
const cors = require("cors");
const bodyParser = require("body-parser")
const bcrypt = require("bcrypt") //Criptografia da senha

const app = express() //Cria o servidor
app.use(cors()) //Aceitar de outros sem ser de nossa maquina
app.use(bodyParser.json()) //Ler em JSON

//Rotas

//Rota consulta Clientes /clientes
app.get("/clientes", async (req, res) => {
    const query = "SELECT * FROM clientes" //Pegando os usuarios do Banco de Dados
    try {
        const [clientes] = await conexao.query(query) //Peidndo um item pelo query (ja que a conexão é uma pull)
        res.json(clientes)
        console.log(clientes)
    }
    catch (error) {
        console.error("O erro foi:", error) //erro de promisse
    }
})

//Rota de cadastro
app.post("/clientes", async (req, res) => {
    const { nome, telefone, senha, email, dataCadastro } = req.body //Dados atribuidos aos nomes das variaveis (mesmo nome aqui e no formulario)
    const hashSenha = bcrypt.hashSync(senha, 10) //Criptografar a senha (10 é padrão)

    try {
        const query = "INSERT INTO clientes (nome, telefone, senha, email) VALUES(?, ?, ?, ?)"//Query para inserir os dados
        await conexao.query(query, [nome, telefone, email, hashSenha]) //Conexão para enviar os  itens ao DataBase
        res.status(201).json({
            mensagem: "Usuário cadastrado com sucesso!"
        }) //Menagem de resposta positiva
    }

    catch (error) {
        console.error("Erro ao cadastrar usuário: ", error)
        res.status(500).json({
            mensagem: "Erro interno!"
        }) //Mensagem caso de mensagem negativa
    }
})


//Rota de Login
app.post("/login", async (req, res) => {
    const { email, senha } = req.body

    try {
        const query = "SELECT email, senha FROM clientes WHERE email = ?" //So retorna se o email for o mesmo enviado na requisição
        const [cliente] = await conexao.query(query, [email]) //Seleciona o email e senha do usuario para verificações
        const decriptSenha = bcrypt.compareSync(cliente.senha, senha) //Comparar senha com senha

        if (decriptSenha) {
            res.status(200).json({
                mensagem: "Login realizado com sucesso" //Caso não haja um  usuario
            })
        }
        else {
            res.status(400).json({
                mensagem: "Usuário ou senha incorretos!"
            })
        }
    }
    catch (error) {
        console.log("Usuário não encontrado!")
    }

    const decriptSenha =  bcrypt.compareSync(senha, hashSenha)
})

//Atualização de dados
app.put("/clientes/:id", async (req, res) => {
    const {nome, telefone} = req.body //dados a se atualizar da requisição
    const id = req.params.id //Acessa o paranetro da URL

    try{
        const query = "UPDATE clientes SET nome = ? , telefone = ? WHERE id = ?" //Setando o valor de atualização
        await conexao.query(query, [nome, telefone, id]) //itens necessarios do ? ? ?
        
        res.status(200).json({
            mensagem: "Os dados foram atualizados com sucesso!"
        })
    }
    catch(error){
        res.status(500).json({
            mensagem: "Os dados não foram atualizados, tente novamente!"
        })
    }
})

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});

